using FiniteDifferences;
using LinearAlgebra;
using SparseArrays;

# Caching the coefs until 15 points
const COEFS_UNTIL_15 = Dict(
  3 => [1.0, -2.0, 1.0],
  5 => [-0.08333333333333333, 1.3333333333333333, -2.5, 1.3333333333333333,-0.08333333333333333],
  7 => [0.011111111111111112, -0.15, 1.5, -2.7222222222222223, 1.5, -0.15, 0.011111111111111112],
  9 => [-0.0017857142857142857, 0.025396825396825397, -0.2, 1.6, -2.8472222222222223, 1.6, -0.2, 0.025396825396825397, -0.0017857142857142857],
  11 => [0.00031746031746031746, -0.00496031746031746, 0.03968253968253968, -0.23809523809523808, 1.6666666666666667, -2.9272222222222224, 1.6666666666666667, -0.23809523809523808, 0.03968253968253968, -0.00496031746031746, 0.00031746031746031746],
  13 => [-6.012506012506013e-5, 0.001038961038961039, -0.008928571428571428, 0.05291005291005291, -0.26785714285714285, 1.7142857142857142, -2.9827777777777778, 1.7142857142857142, -0.26785714285714285, 0.05291005291005291, -0.008928571428571428, 0.001038961038961039, -6.012506012506013e-5],
  15 => [1.1892869035726179e-5, -0.00022662522662522663, 0.0021212121212121214, -0.013257575757575758, 0.06481481481481481, -0.2916666666666667, 1.75, -3.02359410430839, 1.75, -0.2916666666666667, 0.06481481481481481, -0.013257575757575758, 0.0021212121212121214, -0.00022662522662522663, 1.1892869035726179e-5],
)

const GRID_UNTIL_15 = Dict(
  3 => [-1, 0, 1],
  5 => [-2, -1, 0, 1, 2],
  7 => [-3, -2, -1, 0, 1, 2, 3],
  9 => [-4, -3, -2, -1, 0, 1, 2, 3, 4],
  11 => [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
  13 => [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6],
  15 => [-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6,7],
)

function generate_coeff_matrix(n, δ, points=3)
  @assert points % 2 == 1 "N of points must be odd"
  coefs, offsets = if points <= 15
    (COEFS_UNTIL_15[points], GRID_UNTIL_15[points])
  else
    fdm = central_fdm(points, 2)
    (Array(fdm.coefs), Array(fdm.grid))
  end
  a = spdiagm([offsets[i] => fill(coefs[i], n - abs(offsets[i])) for i ∈ 1:points]...)
  a = a / δ^2
  id = I(n)
  return kron(a, id) + kron(id, a)
end
